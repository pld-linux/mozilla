--- netwerk/protocol/http/src/nsHTTPHandler.h.orig	Tue Oct 17 15:15:29 2000
+++ netwerk/protocol/http/src/nsHTTPHandler.h	Tue Oct 17 15:15:58 2000
@@ -124,6 +124,7 @@
     PRTime GetSessionStartTime() { return mSessionStartTime; }
 
     void    PrefsChanged(const char* pref = 0);
+    void    PrefsChangedMisc(const char* pref = 0);
 
     nsresult FollowRedirects(PRBool bFollow=PR_TRUE);
 
--- netwerk/protocol/http/src/nsHTTPHandler.cpp.orig	Tue Oct 17 15:15:34 2000
+++ netwerk/protocol/http/src/nsHTTPHandler.cpp	Tue Oct 17 15:15:52 2000
@@ -19,6 +19,7 @@
  *
  * Contributor(s): 
  *   Pierre Phaneuf <pp@ludusdesign.com>
+ *   Christopher Blizzard <blizzard@mozilla.org>
  */
 
 #include "nspr.h"
@@ -79,6 +80,7 @@
 #endif /* PR_LOGGING */
 
 static PRInt32 PR_CALLBACK HTTPPrefsCallback(const char* pref, void* instance);
+static PRInt32 PR_CALLBACK HTTPPrefsCallbackMisc(const char* pref, void* instance);
 static const char NETWORK_PREFS[] = "network.";
 static const char INTL_ACCEPT_LANGUAGES[] = "intl.accept_languages";
 
@@ -767,6 +769,8 @@
                 HTTPPrefsCallback, (void*)this);
     mPrefs->RegisterCallback(INTL_ACCEPT_LANGUAGES, 
                 HTTPPrefsCallback, (void*)this);
+    mPrefs->RegisterCallback(UA_PREF_PREFIX "misc",
+                HTTPPrefsCallbackMisc, (void *)this);
     PrefsChanged();
 
     rv = InitUserAgentComponents();
@@ -831,6 +835,8 @@
                 HTTPPrefsCallback, (void*)this);
         mPrefs->UnregisterCallback(INTL_ACCEPT_LANGUAGES, 
                 HTTPPrefsCallback, (void*)this);
+        mPrefs->UnregisterCallback(UA_PREF_PREFIX "misc",
+                HTTPPrefsCallbackMisc, (void *)this);
     }
 
     CRTFREEIF (mAcceptLanguages);
@@ -1450,12 +1456,37 @@
 
 }
 
+void
+nsHTTPHandler::PrefsChangedMisc(const char* pref)
+{
+    nsXPIDLCString UAPrefVal;
+    
+    // Gather misc value.
+    nsresult rv = mPrefs->CopyCharPref(UA_PREF_PREFIX "misc",
+                                       getter_Copies(UAPrefVal));
+    if (NS_SUCCEEDED(rv)) {
+        mAppMisc.Assign(UAPrefVal);
+        BuildUserAgent();
+    }
+
+    return;
+}
+
 PRInt32 PR_CALLBACK HTTPPrefsCallback(const char* pref, void* instance)
 {
     nsHTTPHandler* pHandler = (nsHTTPHandler*) instance;
     NS_ASSERTION(nsnull != pHandler, "bad instance data");
     if (nsnull != pHandler)
         pHandler->PrefsChanged(pref);
+    return 0;
+}
+
+PRInt32 PR_CALLBACK HTTPPrefsCallbackMisc(const char* pref, void* instance)
+{
+    nsHTTPHandler* pHandler = (nsHTTPHandler*) instance;
+    NS_ASSERTION(nsnull != pHandler, "bad instance data");
+    if (nsnull != pHandler)
+        pHandler->PrefsChangedMisc(pref);
     return 0;
 }
 
