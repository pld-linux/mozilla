diff -u -r1.15 Makefile.in
--- mozilla.old/embedding/tests/gtkEmbed/Makefile.in	2001/06/20 20:18:20	1.15
+++ mozilla/embedding/tests/gtkEmbed/Makefile.in	2001/07/06 07:00:28
@@ -39,7 +39,8 @@
 		$(XPCOM_LIBS) \
 		-lgtksuperwin \
 		$(PROFILE_LIBS) \
-                $(NULL)
+		$(DIST)/lib/libmpfilelocprovider_s.$(LIB_SUFFIX) \
+		$(NULL)
 
 LIBS += $(TK_LIBS)
 
diff -u -r1.16 main.cpp
--- mozilla.old/embedding/tests/gtkEmbed/main.cpp	2001/06/30 10:59:26	1.16
+++ mozilla/embedding/tests/gtkEmbed/main.cpp	2001/07/06 07:00:29
@@ -14,10 +14,17 @@
 #include "WebBrowserChrome.h"
 #include "WindowCreator.h"
 
-#include "nsIEventQueueService.h"
-#include "nsIServiceManager.h"
-#include "nsIWindowWatcher.h"
+#include <nsIEventQueueService.h>
+#include <nsIServiceManager.h>
+#include <nsIWindowWatcher.h>
+#include <nsIPref.h>
 
+// For getenv()
+#include "prenv.h"  
+
+// for profiles
+#include <nsMPFileLocProvider.h>
+
 #ifdef NS_TRACE_MALLOC
 #include "nsTraceMalloc.h"
 #endif
@@ -27,6 +34,8 @@
 static gint  io_identifier = 0;
 static char *sWatcherContractID = "@mozilla.org/embedcomp/window-watcher;1";
 
+nsIPref *sPrefs = nsnull;
+
 typedef struct
 {
   GtkWidget *window;
@@ -250,20 +259,81 @@
 }
 
 
+// Initialize profiles, need this for SSL to work.
+// Borrowed from TestGtkEmbed.cpp, EmbedPrivate.cpp.
+nsresult InitProfile()
+{
+    nsresult rv;
 
+	char *home_path = home_path = PR_GetEnv("HOME");
+	char *sProfileDir = g_strdup_printf("%s/%s", home_path, ".gtkEmbed");
+	char *sProfileName = g_strdup_printf("%s", "gtkEmbed");
+
+	// initialize profiles
+    nsCOMPtr<nsILocalFile> profileDir;
+    PRBool exists = PR_FALSE;
+    PRBool isDir = PR_FALSE;
+    profileDir = do_CreateInstance(NS_LOCAL_FILE_CONTRACTID);
+    rv = profileDir->InitWithPath(sProfileDir);
+    if (NS_FAILED(rv))
+      return NS_ERROR_FAILURE;
+    profileDir->Exists(&exists);
+    profileDir->IsDirectory(&isDir);
+    // if it exists and it isn't a directory then give up now.
+    if (!exists) {
+      rv = profileDir->Create(nsIFile::DIRECTORY_TYPE, 0700);
+      if NS_FAILED(rv) {
+	return NS_ERROR_FAILURE;
+      }
+    }
+    else if (exists && !isDir) {
+      return NS_ERROR_FAILURE;
+    }
+    // actually create the loc provider and initialize prefs.
+    nsMPFileLocProvider *locProvider;
+    // Set up the loc provider.  This has a really strange ownership
+    // model.  When I initialize it it will register itself with the
+    // directory service.  The directory service becomes the owning
+    // reference.  So, when that service is shut down this object will
+    // be destroyed.  It's not leaking here.
+    locProvider = new nsMPFileLocProvider;
+    rv = locProvider->Initialize(profileDir, sProfileName);
+
+    // get prefs
+    nsCOMPtr<nsIPref> pref;
+    pref = do_GetService(NS_PREF_CONTRACTID);
+    if (!pref)
+      return NS_ERROR_FAILURE;
+    sPrefs = pref.get();
+    NS_ADDREF(sPrefs);
+    sPrefs->ResetPrefs();
+    sPrefs->ReadUserPrefs(nsnull);
+
+	return NS_OK;
+}
+
+
 int main( int  argc,  char *argv[] )
 {
 #ifdef NS_TRACE_MALLOC
   argc = NS_TraceMallocStartupArgs(argc, argv);
 #endif
 
+  // Get startup URL.
   char *loadURLStr;
   if (argc > 1)
     loadURLStr = argv[1];
   else
       loadURLStr = "http://www.mozilla.org/projects/embedding";
 
+  // Initialize Embedding APIs.
   NS_InitEmbedding(nsnull, nsnull);
+
+  // Initialize profile, we need this for SSL to work.
+  nsresult rv = InitProfile();
+  if (NS_FAILED(rv))
+      NS_WARNING("Warning: Failed to start up profiles.\n");
+
 
   InitializeWindowCreator();
 
